<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:controls="clr-namespace:Monitorian.Core.Views.Controls"
					xmlns:converters="clr-namespace:Monitorian.Core.Views.Converters">

	<!-- Theme (Dark theme) -->
	<Color x:Key="App.ForegroundColor">White</Color>
	<Color x:Key="App.ShadowColor">LightGray</Color>
	<Color x:Key="App.TargetColor">LightGray</Color>
	<Color x:Key="App.OverlayColor">#48000000</Color>
	<Color x:Key="App.AccentColor">#FF2982CC</Color>
	<Color x:Key="App.InvalidColor">Red</Color>

	<SolidColorBrush x:Key="App.Foreground" Color="{DynamicResource App.ForegroundColor}"/>
	<SolidColorBrush x:Key="App.Foreground.Shadow" Color="{DynamicResource App.ShadowColor}"/>
	<SolidColorBrush x:Key="App.Foreground.Invalid" Color="{StaticResource App.InvalidColor}"/>
	<SolidColorBrush x:Key="App.Background.Plain" Color="#FF1F1F1F"/>
	<SolidColorBrush x:Key="App.Background.Translucent" Color="#D3161616"/>
	<SolidColorBrush x:Key="App.Background.Accent" Color="{StaticResource App.AccentColor}"/>

	<Color x:Key="Icon.Foreground.NormalColor">#FF808080</Color>
	<Color x:Key="Icon.Background.MouseOverColor">#33FFFFFF</Color>
	<Color x:Key="Icon.Background.PressedColor">#55FFFFFF</Color>

	<SolidColorBrush x:Key="Icon.Foreground.Normal" Color="{DynamicResource Icon.Foreground.NormalColor}"/>

	<SolidColorBrush x:Key="Menu.Separator" Color="#FF808080"/>

	<SolidColorBrush x:Key="Menu.Item.Background.MouseOver" Color="#FF5F5F5F"/>

	<Color x:Key="Text.Foreground.NormalColor">White</Color>
	<Color x:Key="Text.Foreground.DisabledColor">#FFC8C8C8</Color>
	<Color x:Key="Text.Background.NormalColor">#BB848484</Color>
	<Color x:Key="Text.Background.MouseOverColor">#BB969696</Color>
	<Color x:Key="Text.Background.PressedColor">#BBA8A8A8</Color>

	<SolidColorBrush x:Key="ScrollBar.Thumb.Normal" Color="#33BCBCBC"/>
	<SolidColorBrush x:Key="ScrollBar.Thumb.MouseOver" Color="#33EFEFEF"/>
	<SolidColorBrush x:Key="ScrollBar.Thumb.Pressed" Color="#33EFEFEF"/>

	<!-- Converters -->
	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverterKey"/>
	<converters:BooleanToVisibilityTurnConverter x:Key="BooleanToVisibilityTurnConverterKey"/>
	<converters:VisibilityToBooleanFilterConverter x:Key="VisibilityToBooleanFilterConverterKey"/>
	<converters:BooleanInverseConverter x:Key="BooleanInverseConverterKey"/>
	<converters:VisibilityInverseConverter x:Key="VisibilityInverseConverterKey"/>
	<converters:StringToVisibilityConverter x:Key="StringToVisibilityConverterKey"/>

	<!-- Menu separator -->
	<Style x:Key="MenuSeparatorStyle" TargetType="{x:Type Separator}">
		<Setter Property="Margin" Value="8,4"/>
		<Setter Property="Background" Value="{DynamicResource Menu.Separator}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="UseLayoutRounding" Value="True"/>
		<Setter Property="controls:FrameworkElementSize.ConsistentHeight" Value="1"/>
	</Style>

	<!-- Menu item -->
	<Style x:Key="MenuItemStyle" TargetType="{x:Type ContentControl}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<Grid x:Name="body"
						  Background="Transparent"
						  SnapsToDevicePixels="True" UseLayoutRounding="True">
						<ContentPresenter x:Name="presenter"
										  Margin="{TemplateBinding Padding}"
										  Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="FocusManager.FocusedElement" TargetName="presenter" Value="{Binding ElementName=presenter, Path=Content}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="Background" TargetName="body" Value="{DynamicResource Menu.Item.Background.MouseOver}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Check Button -->
	<Style x:Key="CheckButtonItemStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{StaticResource App.Foreground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Margin="{TemplateBinding Padding}"
						  Background="{TemplateBinding Background}"
						  SnapsToDevicePixels="True" UseLayoutRounding="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid Grid.Column="0"
							  Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}">
							<Polyline x:Name="checkMark"
									  Margin="3"
									  Points="0,5 4,9 12,0" Stretch="Uniform"
									  Stroke="{TemplateBinding Foreground}" StrokeThickness="1"
									  Opacity="0"/>
						</Grid>
						<ContentPresenter Grid.Column="1"
										  Margin="3" HorizontalAlignment="Left" VerticalAlignment="Center"
										  Focusable="False"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Opacity" TargetName="checkMark" Value="1"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter Property="Opacity" TargetName="checkMark" Value="0"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Plain Button -->
	<Style x:Key="PlainButtonItemStyle" TargetType="{x:Type ContentControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{StaticResource App.Foreground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<Grid Margin="{TemplateBinding Padding}"
						  Background="{TemplateBinding Background}"
						  SnapsToDevicePixels="True" UseLayoutRounding="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid Grid.Column="0"
							  Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}"/>
						<ContentPresenter Grid.Column="1"
										  Margin="3" HorizontalAlignment="Left" VerticalAlignment="Center"
										  Focusable="False"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Close Button -->
	<Style x:Key="CloseButtonItemStyle" TargetType="{x:Type ContentControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{StaticResource App.Foreground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<Grid Margin="{TemplateBinding Padding}"
						  Background="{TemplateBinding Background}"
						  SnapsToDevicePixels="True" UseLayoutRounding="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid Grid.Column="0"
							  Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}">
							<Path Margin="3"
								  Stretch="Uniform"
								  Stroke="{TemplateBinding Foreground}" StrokeThickness="1">
								<Path.Data>
									<GeometryGroup>
										<LineGeometry StartPoint="0,0" EndPoint="1,1"/>
										<LineGeometry StartPoint="0,1" EndPoint="1,0"/>
									</GeometryGroup>
								</Path.Data>
							</Path>
						</Grid>
						<ContentPresenter Grid.Column="1"
										  Margin="3" HorizontalAlignment="Left" VerticalAlignment="Center"
										  Focusable="False"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>